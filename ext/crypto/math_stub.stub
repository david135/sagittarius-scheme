;; -*- mode: scheme; coding: utf-8; -*-
(library (sagittarius math impl)
    (export)
    (import :none)

  (decl-code
   (.include <sagittarius.h>)
   (.define "LIBSAGITTARIUS_EXT_BODY")
   (.include <sagittarius/extend.h>
	     "math.h"))

  (define-type <prng> "SgPrng*")
  (define-type <hash-algo> "SgHashAlgo*")

  (define-c-proc prng? (o) ::<boolean>
    (result (SG_PRNGP o)))

  (define-c-proc pseudo-random? (o) ::<boolean>
    (result (and (SG_PRNGP o) (SG_EQ (-> (SG_PRNG o) type) SG_BUILTIN_PRNG))))

  (define-c-proc custom-random? (o) ::<boolean>
    (result (and (SG_PRNGP o) (SG_EQ (-> (SG_PRNG o) type) SG_CUSTOM_PRNG))))

  (define-c-proc secure-random? (o) ::<boolean>
    (result (and (SG_PRNGP o) (SG_EQ (-> (SG_PRNG o) type) SG_SECURE_PRNG))))

  ;; pseudo random
  (define-c-proc make-pseudo-random (name::<string> :optional (seed #f)) 
    (unless (or (SG_FALSEP seed)
		(SG_BVECTORP seed))
      (Sg_WrongTypeOfArgumentViolation 'make-pseudo-random
				       (SG_MAKE_STRING "bytevector or #f")
				       seed '()))
    (result (Sg_MakePseudoRandom name seed)))

  (define-c-proc make-secure-random (name::<string> bits::<fixnum>) 
    (when (< bits 0)
      (Sg_WrongTypeOfArgumentViolation 'make-secure-random
				       (SG_MAKE_STRING "positive integer")
				       (SG_MAKE_INT bits) '()))
    (result (Sg_MakeSecureRandom name bits)))

  (define-c-proc %random-seed-set! (prng::<prng> seed::<bytevector>) ::<void>
    (Sg_SetSeed prng seed))

  (define-c-proc make-custom-prng (name::<string> read::<procedure>) 
    (result (Sg_MakeCustomPrng name read)))

  (define-c-proc read-random-bytes (prng::<prng> size::<fixnum>) 
    (when (<= size 0)
      (Sg_WrongTypeOfArgumentViolation 'read-random-bytes
				       (SG_MAKE_STRING "positive integer")
				       (SG_MAKE_INT size) '()))
    (result (Sg_ReadRandomBytes prng size)))

  (define-c-proc hash-algorithm? (o) ::<boolean>
    (result (SG_HASH_P o)))

  (define-c-proc make-hash-algorithm (name::<string> process) 
    (unless (or (SG_FALSEP process)
		(SG_PROCEDUREP process))
      (Sg_WrongTypeOfArgumentViolation 'make-hash-algorithm
				       (SG_MAKE_STRING "procedure or #f")
				       process '()))
    (result (Sg_MakeHash name process)))

  (define-c-proc hash-init! (h::<hash-algo>) ::<boolean>
    (result (Sg_HashInit h)))

  (define-c-proc hash-process! (h::<hash-algo> in::<bytevector>) ::<void>
    (Sg_HashProcess h in))

  (define-c-proc hash-done! (h::<hash-algo> out::<bytevector>) ::<void>
    (Sg_HashDone h out))

  (define-c-proc hash-size (h::<hash-algo>) 
    (result (Sg_HashSize h)))

  (define-c-proc hash-oid (h::<hash-algo>) 
    (result (Sg_HashOid h)))
)