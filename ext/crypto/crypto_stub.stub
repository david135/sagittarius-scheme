;; -*- mode: scheme; coding: utf-8; -*-
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   <crypto.h>))

(define-type <cipher> "SgCipher*")
(define-type <cipher-spi> "SgCipherSpi*")
(define-type <key> "SgKey*")
(define-type <builtin-symmetric-key> "SgBuiltinSymmetricKey*")

(define-c-proc crypto-object? (o) ::<boolean>
  (result (Sg_TypeP o SG_CLASS_CRYPTO)))

(define-c-proc cipher? (o) ::<boolean> SG_CIPHERP)

(define-c-proc key? (o) ::<boolean>
  (result (Sg_TypeP o SG_CLASS_KEY)))

;; key
;; this is now generic
;;(define-c-proc generate-secret-key (type::<string> key::<bytevector>) 
;;    (result (Sg_GenerateSecretKey type key)))

(define-c-proc make-builtin-cipher-spi
  (name::<keyword> mode::<fixnum> key::<builtin-symmetric-key>
		  iv rounds::<fixnum> padder ctr_mode::<fixnum>)
  
  (unless (or (SG_FALSEP iv)
	      (SG_BVECTORP iv))
    (Sg_WrongTypeOfArgumentViolation 'make-builtin-cipher-spi
				     (SG_MAKE_STRING "bytevector or #f")
				     iv '()))
  (unless (or (SG_FALSEP padder)
	      (SG_PROCEDUREP padder))
    (Sg_WrongTypeOfArgumentViolation 'make-builtin-cipher-spi
				     (SG_MAKE_STRING "procedure or #f")
				     padder '()))
  (result (Sg_MakeBuiltinCipherSpi (SG_KEYWORD_NAME name) 
				   (cast SgCryptoMode mode)
				   key iv rounds padder ctr_mode)))

(define-c-proc make-cipher (spi)
  (unless (Sg_TypeP spi SG_CLASS_CIPHER_SPI)
    (Sg_WrongTypeOfArgumentViolation 'make-cipher
				     (SG_MAKE_STRING "<cipher-spi>")
				     spi '()))
  (result (Sg_MakeCipher spi)))

(define-c-proc encrypt (crypto::<cipher> pt::<bytevector>) Sg_Encrypt)

(define-c-proc decrypt (crypto::<cipher> ct::<bytevector>) Sg_Decrypt)

(define-c-proc suggest-keysize (name::<cipher> size::<fixnum>) ::<fixnum>
  Sg_SuggestKeysize)

;; now it's generic
;;(define-c-proc cipher-blocksize (name::<cipher>) ::<fixnum>
;;  (result (Sg_CipherBlockSize name)))

(define-c-proc cipher-iv (cipher::<cipher> :optional iv::<bytevector>)
  (if (SG_UNBOUNDP iv)
      (result (Sg_VMSlotRef (-> cipher spi) 'iv))
      (result (Sg_VMSlotSet (-> cipher spi) 'iv iv))))

;; sign
(define-c-proc sign (crypto::<cipher> data::<bytevector> :rest opt) 
  (result (Sg_Signature crypto data opt)))

(define-c-proc verify 
  (crypto::<cipher> M::<bytevector> S::<bytevector> :rest opt) 
  (result (Sg_Verify crypto M S opt)))

(define-c-proc register-spi (name spi::<class>) ::<boolean>
  (result (Sg_RegisterSpi name spi)))

(define-c-proc lookup-spi (name)
  (result (Sg_LookupSpi name)))

