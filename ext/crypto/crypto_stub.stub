;; -*- mode: scheme; coding: utf-8; -*-
(library (sagittarius crypto impl)
    (export)
    (import :null)

  (decl-code
   (.include "crypto.h"))

  (define-c-proc crypto-object? (o) ::boolean
    (result (SG_CRYPTO_P o)))

  (define-c-proc cipher? (o) ::boolean
    (result (and (SG_CRYPTO_P o)
		 (or (== (-> (SG_CRYPTO o) type) CRYPTO_SYM_CIPHER)
		     (== (-> (SG_CRYPTO o) type) CRYPTO_PUB_CIPHER)))))

  (define-c-proc key? (o) ::boolean
    (result (or (and (SG_CRYPTO_P o)
		     (== (-> (SG_CRYPTO o) type) CRYPTO_KEY))
		(and (Sg_RecordP o)
		     (Sg_RtdAncestorP key_rtd (Sg_RecordRtd o))))))

  ;; key
  (define-c-proc generate-secret-key (type::String key::ByteVector) ::Object
    (result (Sg_GenerateSecretKey type key)))

  (define-c-proc make-symmetric-cipher (name::String mode::fixnum key::Crypto
			      iv rounds::fixnum padder ctr_mode::fixnum)
    ::Object
    (unless (SG_KEY_P key)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "key" SG_LITERAL_STRING)
				       key '()))
    (unless (or (SG_FALSEP iv)
		(SG_BVECTORP iv))
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "bytevector or #f" SG_LITERAL_STRING)
				       iv '()))
    (unless (or (SG_FALSEP padder)
		(SG_PROCEDUREP padder))
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "procedure or #f" SG_LITERAL_STRING)
				       padder '()))
    (result (Sg_MakeSymmetricCipher name mode key iv rounds padder ctr_mode)))

  (define-c-proc make-public-key-cipher (name key enc::Procedure
					 dec::Procedure padder
					 signer::Procedure verifier::Procedure) ::Object
    (unless (or (SG_FALSEP padder)
		(SG_PROCEDUREP padder))
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "procedure or #f" SG_LITERAL_STRING)
				       padder '()))
    (result (Sg_MakePublicKeyCipher name key enc dec padder signer verifier)))

  (define-c-proc encrypt (crypto::Crypto pt::ByteVector) ::Object
    (unless (or (== (-> crypto type) CRYPTO_SYM_CIPHER)
		(== (-> crypto type) CRYPTO_PUB_CIPHER))
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "cipher" SG_LITERAL_STRING)
				       crypto '()))
    (result (Sg_Encrypt crypto pt)))

  (define-c-proc decrypt (crypto::Crypto ct::ByteVector) ::Object
    (unless (or (== (-> crypto type) CRYPTO_SYM_CIPHER)
		(== (-> crypto type) CRYPTO_PUB_CIPHER))
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "cipher" SG_LITERAL_STRING)
				       crypto '()))
    (result (Sg_Decrypt crypto ct)))

  (define-c-proc suggest-keysize (name::String size::fixnum) ::fixnum
    (result (Sg_SuggestKeysize name size)))


  ;; sign
  (define-c-proc sign (crypto::Crypto data::ByteVector :rest opt) ::Object
    (unless (== (-> crypto type) CRYPTO_PUB_CIPHER)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "publick key cipher" SG_LITERAL_STRING)
				       crypto '()))
    (result (Sg_Signature crypto data opt)))

  (define-c-proc verify (crypto::Crypto M::ByteVector S::ByteVector :rest opt) ::Object
    (unless (== (-> crypto type) CRYPTO_PUB_CIPHER)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "publick key cipher" SG_LITERAL_STRING)
				       crypto '()))
    (result (Sg_Verify crypto M S opt)))
)