;; -*- scheme -*-
(library (sagittarius date impl)
    (export make-date
	    date? date-nanosecond
	    date-second date-minute date-hour
	    date-day date-month date-year
	    date-zone-offset

	    ;; this must be private
	    set-date-nanosecond!
	    set-date-second! set-date-minute! set-date-hour!
	    set-date-day! set-date-month! set-date-year!
	    set-date-zone-offset!

	    local-tz-offset)
    (import :none)
  #!compatible
  (decl-code
   (.include <sagittarius.h>)
   (.define "LIBSAGITTARIUS_EXT_BODY")
   (.include <sagittarius/extend.h>
	     "time.h"))

  (define-c-proc make-date (nanosecond::fixnum
			    second::fixnum
			    minute::fixnum
			    hour::fixnum
			    day::fixnum
			    month::fixnum
			    year::fixnum
			    zone_offset::number)
    ::Object
    (result (Sg_MakeDate nanosecond second minute hour day month year
			 (Sg_GetIntegerS64Clamp zone_offset SG_CLAMP_NONE NULL))))

  ;; accessor
  (define-c-proc date? (o) ::boolean
    (result (SG_DATE_P o)))

  (define-c-proc date-nanosecond (o::Date) ::fixnum
    (result (-> (SG_DATE o) nanosecond)))

  (define-c-proc date-second (o::Date) ::fixnum
    (result (-> (SG_DATE o) second)))

  (define-c-proc date-minute (o::Date) ::fixnum
    (result (-> (SG_DATE o) minute)))

  (define-c-proc date-hour (o::Date) ::fixnum
    (result (-> (SG_DATE o) hour)))

  (define-c-proc date-day (o::Date) ::fixnum
    (result (-> (SG_DATE o) day)))

  (define-c-proc date-month (o::Date) ::fixnum
    (result (-> (SG_DATE o) month)))

  (define-c-proc date-year (o::Date) ::fixnum
    (result (-> (SG_DATE o) year)))

  (define-c-proc date-zone-offset (o::Date) ::fixnum
    (result (-> (SG_DATE o) zoneOffset)))

  (define-c-proc set-date-nanosecond! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) nanosecond) val))

  (define-c-proc set-date-second! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) second) val))

  (define-c-proc set-date-minute! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) minute) val))

  (define-c-proc set-date-hour! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) hour) val))

  (define-c-proc set-date-day! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) day) val))

  (define-c-proc set-date-month! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) month) val))

  (define-c-proc set-date-year! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) year) val))

  (define-c-proc set-date-zone-offset! (o::Date val::fixnum) ::void
    (set! (-> (SG_DATE o) zoneOffset) val))

  (define-c-proc local-tz-offset () ::Object
    (result (Sg_LocalTzOffset)))

)
					       