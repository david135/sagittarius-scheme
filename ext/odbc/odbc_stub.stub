;; -*- mode: scheme; coding: utf-8; -*-
(library (odbc impl)
    (export create-odbc-env
	    connect!
	    set-connect-attr!
	    disconnect!
	    statement
	    prepare
	    num-params
	    bind-parameter!
	    execute!
	    execute-direct!
	    fetch!
	    get-data
	    row-count
	    commit!
	    rollback!
	    ;; predicate
	    odbc-env?
	    odbc-connection?
	    odbc-statement?

	    odbc-date?
	    odbc-time?
	    odbc-timestamp?
	    
	    ;; accessor
	    odbc-date-year
	    odbc-date-month
	    odbc-date-day

	    odbc-time-hour
	    odbc-time-minute
	    odbc-time-second

	    odbc-timestamp-year
	    odbc-timestamp-month
	    odbc-timestamp-day
	    odbc-timestamp-hour
	    odbc-timestamp-minute
	    odbc-timestamp-second
	    odbc-timestamp-fraction
	    )
    (import :none)

  (decl-code
   (.include "odbc.h")
   )

  (define-c-proc create-odbc-env () ::Object
    (result (Sg_CreateOdbcCtx SQL_HANDLE_ENV NULL)))

  (define-c-proc connect! (env server::String user::String auth::String :optional (autoCommitP #t))
    ::Object
    (unless (SG_ODBC_ENV_P env)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc env" SG_LITERAL_STRING)
				       env SG_NIL))
    (result (Sg_Connect env server user auth (not (SG_FALSEP autoCommitP)))))

  (define-c-proc set-connect-attr! (hdbc name::fixnum value) ::boolean
    (unless (SG_ODBC_DBC_P hdbc)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc connection" SG_LITERAL_STRING)
				       hdbc SG_NIL))
    (result (Sg_SetConnectAttr hdbc name value)))

  (define-c-proc disconnect! (hdbc) ::boolean
    (unless (SG_ODBC_DBC_P hdbc)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc connection" SG_LITERAL_STRING)
				       hdbc SG_NIL))
    (result (Sg_Disconnect hdbc)))

  (define-c-proc statement (hdbc) ::Object
    (unless (SG_ODBC_DBC_P hdbc)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc connection" SG_LITERAL_STRING)
				       hdbc SG_NIL))
    (result (Sg_Statement hdbc)))

  (define-c-proc prepare (hdbc text::String) ::Object
    (unless (SG_ODBC_DBC_P hdbc)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc connection" SG_LITERAL_STRING)
				       hdbc SG_NIL))
    (result (Sg_Prepare hdbc text)))

  (define-c-proc num-params (stmt) ::fixnum
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_NumParams stmt)))

  (define-c-proc bind-parameter! (stmt index::fixnum value) ::boolean
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_BindParameter stmt index value)))

  (define-c-proc execute! (stmt) ::boolean
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_Execute stmt)))

  (define-c-proc execute-direct! (stmt text::String) ::boolean
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_ExecuteDirect stmt text)))

  (define-c-proc fetch! (stmt) ::boolean
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_Fetch stmt)))

  (define-c-proc get-data (stmt index::fixnum) ::Object
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_GetData stmt index)))

  (define-c-proc row-count (stmt) ::fixnum
    (unless (SG_ODBC_STMT_P stmt)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc statement" SG_LITERAL_STRING)
				       stmt SG_NIL))
    (result (Sg_RowCount stmt)))

  (define-c-proc commit! (ctx) ::boolean
    (unless (SG_ODBC_CTX_P ctx)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc" SG_LITERAL_STRING)
				       ctx SG_NIL))
    (result (Sg_Commit ctx)))

  (define-c-proc rollback! (ctx) ::boolean
    (unless (SG_ODBC_CTX_P ctx)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc" SG_LITERAL_STRING)
				       ctx SG_NIL))
    (result (Sg_Rollback ctx)))

  (define-c-proc odbc-env? (obj) ::boolean
    (result (SG_ODBC_ENV_P obj)))
  (define-c-proc odbc-connection? (obj) ::boolean
    (result (SG_ODBC_DBC_P obj)))
  (define-c-proc odbc-statement? (obj) ::boolean
    (result (SG_ODBC_STMT_P obj)))

  (define-c-proc odbc-date? (obj) ::boolean
    (result (SG_ODBC_DATE_DATE_P obj)))
  (define-c-proc odbc-time? (obj) ::boolean
    (result (SG_ODBC_DATE_TIME_P obj)))
  (define-c-proc odbc-timestamp? (obj) ::boolean
    (result (SG_ODBC_DATE_TIMESTAMP_P obj)))

  ;; accessors
  (define-c-proc odbc-date-year (date) ::fixnum
    (unless (SG_ODBC_DATE_DATE_P date)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-date" SG_LITERAL_STRING)
				       date SG_NIL))
    (result (-> (SG_ODBC_DATE date) data.date.year)))

  (define-c-proc odbc-date-month (date) ::fixnum
    (unless (SG_ODBC_DATE_DATE_P date)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-date" SG_LITERAL_STRING)
				       date SG_NIL))
    (result (-> (SG_ODBC_DATE date) data.date.month)))

  (define-c-proc odbc-date-day (date) ::fixnum
    (unless (SG_ODBC_DATE_DATE_P date)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-date" SG_LITERAL_STRING)
				       date SG_NIL))
    (result (-> (SG_ODBC_DATE date) data.date.day)))

  (define-c-proc odbc-time-hour (time) ::fixnum
    (unless (SG_ODBC_DATE_TIME_P time)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-time" SG_LITERAL_STRING)
				       time SG_NIL))
    (result (-> (SG_ODBC_DATE time) data.time.hour)))

  (define-c-proc odbc-time-minute (time) ::fixnum
    (unless (SG_ODBC_DATE_TIME_P time)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-time" SG_LITERAL_STRING)
				       time SG_NIL))
    (result (-> (SG_ODBC_DATE time) data.time.minute)))

  (define-c-proc odbc-time-second (time) ::fixnum
    (unless (SG_ODBC_DATE_TIME_P time)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-time" SG_LITERAL_STRING)
				       time SG_NIL))
    (result (-> (SG_ODBC_DATE time) data.time.second)))

  (define-c-proc odbc-timestamp-year (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.year)))

  (define-c-proc odbc-timestamp-month (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.month)))

  (define-c-proc odbc-timestamp-day (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.day)))

  (define-c-proc odbc-timestamp-hour (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.hour)))

  (define-c-proc odbc-timestamp-minute (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.minute)))

  (define-c-proc odbc-timestamp-second (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.second)))

  (define-c-proc odbc-timestamp-fraction (timestamp) ::fixnum
    (unless (SG_ODBC_DATE_TIMESTAMP_P timestamp)
      (Sg_WrongTypeOfArgumentViolation procedureName
				       (Sg_MakeString "odbc-timestamp" SG_LITERAL_STRING)
				       timestamp SG_NIL))
    (result (-> (SG_ODBC_DATE timestamp) data.timestamp.fraction)))
)