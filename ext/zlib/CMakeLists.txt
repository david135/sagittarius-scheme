# Sagittarius extensions -*- CMake -*-
# 
# Build file for zlib

ADD_LIBRARY(sagittarius--zlib MODULE
  sagittarius-zlib.c ${CMAKE_CURRENT_BINARY_DIR}/zlib_stub.c)
# always support
ADD_FEATURE(zlib)

IF (MSVC OR CYGWIN)
  # ugly solution
  SET_SOURCE_FILES_PROPERTIES(sagittarius-zlib.c 
    ${CMAKE_CURRENT_BINARY_DIR}/zlib_stub.c
    PROPERTIES LANGUAGE CXX)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/../addstub.cmake)
ADD_STUBS(sagittarius--zlib
  COMMAND ${GENSTUB}
  FILES zlib_stub.stub
  OUTTREE)

#check if zlib is available
#INCLUDE(${CMAKE_ROOT}/Modules/FindZLIB.cmake)
FIND_PACKAGE(ZLIB)
IF (ZLIB_FOUND)
  IF (${SAGITTARIUS_OS} STREQUAL "qnx")
    MESSAGE(STATUS "On QNX assume it has inflageReset2")
    SET(HAVE_ZLIB_INFLATE_RESET2 1)
  ELSE()
    CHECK_LIBRARY_EXISTS(${ZLIB_LIBRARIES} inflateReset2 "" 
      HAVE_ZLIB_INFLATE_RESET2)
    MESSAGE(STATUS "HAVE_ZLIB_INFLATE_RESET2 = ${HAVE_ZLIB_INFLATE_RESET2}")
  ENDIF()
ENDIF()

# ok for some reason some platform doesn't have this
IF (HAVE_ZLIB_INFLATE_RESET2)
  ADD_DEFINITIONS("-DHAVE_ZLIB_INFLATE_RESET2")
ENDIF()

IF (NOT ZLIB_FOUND)
  # well we need to compile it
  FIND_FILE(HAS_ZLIB_ARCHIVE
    NAMES zlib.tar.gz
    PATHS ${CMAKE_CURRENT_BINARY_DIR})
  MESSAGE(STATUS "Looked for zlib.tar.gz: ${HAS_ZLIB_ARCHIVE}")
  SET(USED_ZLIB_VERSION "zlib-1.2.8")
  IF (NOT EXISTS ${HAS_ZLIB_ARCHIVE})
    MESSAGE(STATUS "donwloading zlib")
    FILE(
      DOWNLOAD "http://zlib.net/${USED_ZLIB_VERSION}.tar.gz"
      "${CMAKE_CURRENT_BINARY_DIR}/zlib.tar.gz"
      SHOW_PROGRESS)
    EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E tar xzf
      ${CMAKE_CURRENT_BINARY_DIR}/zlib.tar.gz
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
    MESSAGE(STATUS "unpacked zlib.tar.gz")
  ENDIF()
  # we can't use patch command, as long as all of environments do
  # not have it. so do the same trick as boehm gc.
  SET(ZLIB_SRC_DIR ${CMAKE_CURRENT_BINARY_DIR}/${USED_ZLIB_VERSION})
  IF (NOT EXISTS ${ZLIB_SRC_DIR}/CMakeLists.txt.in)
    FILE(RENAME ${ZLIB_SRC_DIR}/CMakeLists.txt 
      ${ZLIB_SRC_DIR}/CMakeLists.txt.in)
  ENDIF()
  FILE(READ ${ZLIB_SRC_DIR}/CMakeLists.txt.in ZLIB_BUILD_LINES)
  # convert lines to list
  STRING(REGEX REPLACE ";" "\\\\;" ZLIB_BUILD_LINES "${ZLIB_BUILD_LINES}")
  STRING(REGEX REPLACE "\n" ";" ZLIB_BUILD_LINES "${ZLIB_BUILD_LINES}")
  # recreate CMakeLists.txt
  FILE(WRITE ${ZLIB_SRC_DIR}/CMakeLists.txt 
    "# generated by Sagittarius build process\n")
  FOREACH(line ${ZLIB_BUILD_LINES})
    # this must be a bug on zlib but can't do anything so just modify.
    IF (line STREQUAL "if(NOT MINGW)")
      FILE(APPEND ${ZLIB_SRC_DIR}/CMakeLists.txt "if(MSVC)\n")
    ELSE()
      FILE(APPEND ${ZLIB_SRC_DIR}/CMakeLists.txt "${line}\n")
    ENDIF()
    IF (line MATCHES "^include_directories")
      # add extra
      FILE(APPEND ${ZLIB_SRC_DIR}/CMakeLists.txt 
	"include_directories(\${CMAKE_CURRENT_SOURCE_DIR})\n")
    ENDIF()
  ENDFOREACH()
  # this will duplicate so delete it
  FILE(REMOVE ${ZLIB_SRC_DIR}/zconf.h)
  # CMake add C_FLAGS to RC_FLAGS. how stupid it is, eh?
  ADD_SUBDIRECTORY(${ZLIB_SRC_DIR} zlib)
  INCLUDE_DIRECTORIES(${ZLIB_SRC_DIR})
  # for zconf.h
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/zlib)
ELSEIF()
  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
ENDIF()

SET_TARGET_PROPERTIES(sagittarius--zlib PROPERTIES PREFIX "")
IF(APPLE)
  SET_TARGET_PROPERTIES(sagittarius--zlib PROPERTIES SUFFIX ".dylib")
ENDIF()
TARGET_LINK_LIBRARIES(sagittarius--zlib sagittarius)
IF (UNIX)
  IF (NOT ZLIB_FOUND OR NOT HAVE_ZLIB_INFLATE_RESET2)
    TARGET_LINK_LIBRARIES(sagittarius--zlib zlib)
  ELSE()
    TARGET_LINK_LIBRARIES(sagittarius--zlib z)
  ENDIF()
ELSE()
  TARGET_LINK_LIBRARIES(sagittarius--zlib zlib)
ENDIF()

INSTALL(TARGETS sagittarius--zlib
  DESTINATION ${SAGITTARIUS_DYNLIB_PATH})
INSTALL(DIRECTORY rfc
  DESTINATION ${SAGITTARIUS_SHARE_LIB_PATH})

# test
FILE(APPEND ${EXT_TEST_RESOURCE_FILE} "${CMAKE_CURRENT_SOURCE_DIR}\n")
IF (NOT EXISTS ${PROJECT_BINARY_DIR}/ext/zlib/data)
  FILE(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data
    DESTINATION ${PROJECT_BINARY_DIR}/ext/zlib/)
ENDIF()
