;; -*- scheme -*-
(library (sagittarius socket impl)
    (export make-client-socket
	    make-server-socket
	    socket?
	    socket-port
	    ;;call-with-socket
	    shutdown-output-port
	    socket-accept
	    socket-send
	    socket-recv
	    socket-shutdown
	    socket-close)
    (import :none)

  #!compatible
  (decl-code
   (.include <sagittarius.h>)
   (.define "LIBSAGITTARIUS_EXT_BODY")
   (.include <sagittarius/extend.h>
	     "socket.h"))

  (define-cgen-stmt check-string-or-false
    ((_ o)
     (dispatch
      `(unless (or (SG_STRINGP ,o)
		   (SG_FALSEP ,o))
	 (Sg_WrongTypeOfArgumentViolation procedureName
					  (Sg_MakeString "string or #f" SG_LITERAL_STRING)
					  ,o
					  '())
	 (return SG_UNDEF)))))

  (define-c-proc make-client-socket (node
				     service
				     :optional
				     (ai_family::fixnum AF_INET)
				     (ai_socktype::fixnum SOCK_STREAM)
				     (ai_flags::fixnum (+ AI_V4MAPPED AI_ADDRCONFIG))
				     (ai_protocol::fixnum 0))
    ::Object
    (check-string-or-false node)
    (check-string-or-false service)
    (when (SG_FALSEP node)
      (set! node NULL))
    (when (SG_FALSEP service)
      (set! service NULL))
    (let ((sock (Sg_CreateClientSocket (SG_STRING node)
				       (SG_STRING service)
				       ai_family
				       ai_socktype
				       ai_flags
				       ai_protocol)))
      (if (Sg_SocketOpenP (SG_SOCKET sock))
	  (result sock)
	  (begin
	    (Sg_IOError (cast SgIOErrorType -1) procedureName
			(Sg_GetLastErrorMessageWithErrorCode (-> (SG_SOCKET sock) lastError))
			#f (SG_LIST2 node service))
	    (result SG_UNDEF)))))

  (define-c-proc make-server-socket (service 
				     :optional
				     (ai_family::fixnum AF_INET)
				     (ai_socktype::fixnum SOCK_STREAM)
				     (ai_protocol::fixnum 0))
    ::Object
    (check-string-or-false service)
    (when (SG_FALSEP service)
      (set! service NULL))
    (let ((sock (Sg_CreateServerSocket (SG_STRING service)
				       ai_family ai_socktype ai_protocol)))
      (if (Sg_SocketOpenP (SG_SOCKET sock))
	  (result sock)
	  (begin
	    (Sg_IOError (cast SgIOErrorType -1) procedureName
			(Sg_GetLastErrorMessageWithErrorCode (-> (SG_SOCKET sock) lastError))
			#f service)
	    (result SG_UNDEF)))))

  (define-c-proc socket? (o) ::boolean
    (result (SG_SOCKET_P o)))

  (define-c-proc socket-port (o::Socket) ::Object
    (result (Sg_MakeSocketPort (SG_SOCKET o))))

  (define-c-proc shutdown-output-port (o::Port) ::void
    (Sg_ShutdownPort o))

  (define-c-proc socket-accept (o::Socket) ::Object
    (result (Sg_SocketAccept (SG_SOCKET o))))

  (define-c-proc socket-send (o::Socket bv::ByteVector flags::fixnum) ::fixnum
    (result (Sg_SocketSend (SG_SOCKET o)
			   (SG_BVECTOR_ELEMENTS bv)
			   (SG_BVECTOR_SIZE bv)
			   flags)))

  (define-c-proc socket-recv (o len::fixnum flags::fixnum) ::Object
    (let ((data::uint8_t* (SG_NEW_ATOMIC2 uint8_t* len))
	  (result::int (Sg_SocketReceive (SG_SOCKET o) data len flags)))
      (result (Sg_MakeByteVectorFromU8Array data result))))

  (define-c-proc socket-shutdown (o how::fixnum) ::void
    (Sg_SocketShutdown (SG_SOCKET o) how))

  (define-c-proc socket-close  (o::Socket) ::void
    (Sg_SocketClose (SG_SOCKET o)))
)