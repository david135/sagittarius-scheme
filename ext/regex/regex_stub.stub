;; -*- scheme -*-
(library (sagittarius regex impl)
    (export compile-regex
	    regex-matcher
	    regex-matches
	    regex-find
	    regex-looking-at
	    regex-group

	    ;; predicates
	    regex-pattern?
	    regex-matcher?

	    ;; utility
	    regex-after
	    regex-before

	    ;; modify
	    regex-replace-all
	    regex-replace-first

	    ;; accessor
	    matcher-first
	    matcher-last
	    )
    (import :none)

  #!compatible
  (decl-code
   (.include "regex.h"))

  (define-c-proc compile-regex (p::String :optional (flags::fixnum 0)) ::Object
    (result (Sg_CompileRegex p flags)))

  (define-cgen-stmt check-pattern
    ((_ o)
     (dispatch
      `(unless (SG_PATTERN_P ,o)
	 (Sg_WrongTypeOfArgumentViolation procedureName
					  (Sg_MakeString "regex pattern" SG_LITERAL_STRING)
					  ,o
					  '())))))

  (define-c-proc regex-matcher (pat input::String) ::Object
    (check-pattern pat)
    (result (Sg_RegexMatcher (SG_PATTERN pat) input)))

  (define-cgen-stmt check-matcher
    ((_ o)
     (dispatch
      `(unless (SG_MATCHER_P ,o)
	 (Sg_WrongTypeOfArgumentViolation procedureName
					  (Sg_MakeString "regex matcher" SG_LITERAL_STRING)
					  ,o
					  '())))))

  (define-c-proc regex-matches (m) ::boolean
    (check-matcher m)
    (result (Sg_RegexMatches m)))

  (define-c-proc regex-find (m :optional (start::fixnum -1)) ::boolean
    (check-matcher m)
    (result (Sg_RegexFind m start)))

  (define-c-proc regex-looking-at (m) ::boolean
    (check-matcher m)
    (result (Sg_RegexLookingAt m)))

  (define-c-proc regex-group (m :optional (group::fixnum 0)) ::Object
    (check-matcher m)
    (result (Sg_RegexGroup m group)))

  (define-c-proc regex-pattern? (o) ::boolean
    (result (SG_PATTERN_P o)))

  (define-c-proc regex-matcher? (o) ::boolean
    (result (SG_MATCHER_P o)))

  (define-c-proc regex-after (m) ::Object
    (check-matcher m)
    (result (Sg_Substring (-> (SG_MATCHER m) text)
			  (-> (SG_MATCHER m) last)
			  (-> (SG_MATCHER m) to))))

  (define-c-proc regex-before (m) ::Object
    (check-matcher m)
    (result (Sg_Substring (-> (SG_MATCHER m) text)
			  0
			  (- (-> (SG_MATCHER m) last) 1))))

  (define-c-proc regex-replace-all (m replacement::String) ::Object
    (check-matcher m)
    (result (Sg_RegexReplaceAll m replacement)))

  (define-c-proc regex-replace-first (m replacement::String) ::Object
    (check-matcher m)
    (result (Sg_RegexReplaceFirst m replacement)))


  (define-c-proc matcher-first (m) ::fixnum
    (check-matcher m)
    (result (-> (SG_MATCHER m) first)))

  (define-c-proc matcher-last (m) ::fixnum
    (check-matcher m)
    (result (-> (SG_MATCHER m) last)))
)