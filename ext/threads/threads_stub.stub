;; -*- scheme -*-
#!compatible
(decl-code
 (.include <sagittarius.h>)
 (.define "LIBSAGITTARIUS_EXT_BODY")
 (.include <sagittarius/extend.h>
	   "threads.h"))

(define-cise-stmt assertion-violation
  ((_ who msg)
   `(begin
      (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) '())))
  ((_ who msg irritants)
   `(begin
      (Sg_AssertionViolation ,who (SG_MAKE_STRING ,msg) ,irritants)
      )))

(define-cise-stmt wrong-type-of-argument-violation
  ((_ who msg got)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got '())))
  ((_ who msg got irritants)
   `(begin
      (Sg_WrongTypeOfArgumentViolation ,who (SG_MAKE_STRING ,msg) ,got ,irritants))))

(define-type <mutex> "SgMutex*")
(define-type <condition-variable> "SgConditionVariable*")

;; thread is VM
(define-c-proc thread? (obj) ::<boolean>
  (result (SG_VMP obj)))

(define-c-proc make-thread (thunk::<procedure> 
			    :optional (name (Sg_Gensym 
					     (SG_STRING
					      (SG_MAKE_STRING "thread-")))))
  
  (result (Sg_MakeThread thunk name)))

(define-c-proc thread-name (obj::<thread>) 
  (result (-> obj name)))

(define-c-proc thread-specific-set! (obj::<thread> value) ::<void>
  (set! (-> obj specific) value))

(define-c-proc thread-specific (obj::<thread>) 
  (result (-> obj specific)))

(define-c-proc thread-state (vm::<thread>) 
  (let ((state::int (-> vm threadState)))
    (cond ((== SG_VM_NEW state) (result 'new))
	  ((== SG_VM_RUNNABLE state) (result 'runnable))
	  ((== SG_VM_STOPPED state) (result 'stopped))
	  ((== SG_VM_TERMINATED state) (result 'terminated))
	  (else (Sg_Error
		 (UC "[internal] thread state has invalid value: %d") state)
		(result SG_UNDEF)))))

(define-c-proc current-thread () 
  (result (Sg_VM)))

;;(define-c-proc thread-base-priority (vm::<thread>) 

(define-c-proc thread-start! (vm::<thread>) 
  (result (Sg_ThreadStart vm)))

(define-c-proc thread-join! (vm::<thread> :optional (timeout #f) timeoutval) 
  (result (Sg_ThreadJoin vm timeout timeoutval)))

(define-c-proc thread-yield! () ::<void>
  (Sg_YieldCPU))

(define-c-proc thread-sleep! (time::<integer>) ::<void>
  (Sg_ThreadSleep time))

(define-c-proc thread-stop! (vm::<thread> :optional (timeout #f) timeoutval) 
  (result (Sg_ThreadStop vm timeout timeoutval)))

(define-c-proc thread-cont! (vm::<thread>) 
  (result (Sg_ThreadCont vm)))

(define-c-proc thread-terminate! (vm::<thread>) ::<void>
  (Sg_ThreadTerminate vm))

(define-c-proc mutex? (o) ::<boolean>
  (result (SG_MUTEXP o)))

(define-c-proc make-mutex 
  (:optional (name (Sg_Gensym (SG_STRING (SG_MAKE_STRING "mutex-")))))
  (result (Sg_MakeMutex name)))

(define-c-proc mutex-name (o::<mutex>) 
  (result (-> (SG_MUTEX o) name)))

(define-c-proc mutex-state (o::<mutex>) 
  (result (Sg_MutexState (SG_MUTEX o))))

(define-c-proc mutex-specific (o::<mutex>) 
  (result (-> (SG_MUTEX o) specific)))

(define-c-proc mutex-specific-set! (o::<mutex> value) ::<void>
  (set! (-> (SG_MUTEX o) specific) value))

(define-c-proc mutex-lock! (o::<mutex> :optional (timeout #f) thread) 
  (let ((owner::SgVM* NULL))
    (cond ((SG_VMP thread) (set! owner (SG_VM thread)))
	  ((SG_UNBOUNDP thread) (set! owner (Sg_VM)))
	  ((not (SG_FALSEP thread))
	   (wrong-type-of-argument-violation 'mutex-lock!
					     "thread or #f"
					     thread)))
    (result (Sg_MutexLock (SG_MUTEX o) timeout owner))))

(define-c-proc mutex-unlock! (o::<mutex> :optional (cv #f) (timeout #f)) 
  (let ((cond::SgConditionVariable* NULL))
    (cond ((SG_CONDITION_VARIABLE_P cv) (set! cond (SG_CONDITION_VARIABLE cv)))
	  ((not (SG_FALSEP cv))
	   (wrong-type-of-argument-violation 'mutex-unlock!
					     "condition variable or #f"
					     cv)))
    (result (Sg_MutexUnlock (SG_MUTEX o) cond timeout))))

(define-c-proc condition-variable? (o) ::<boolean>
  (result (SG_CONDITION_VARIABLE_P o)))


(define-c-proc make-condition-variable
  (:optional (name (Sg_Gensym (SG_STRING (SG_MAKE_STRING "cv-")))))
  (result (Sg_MakeConditionVariable name)))

(define-c-proc condition-variable-name (cv::<condition-variable>) 
  (result (-> (SG_CONDITION_VARIABLE cv) name)))

(define-c-proc condition-variable-specific (cv::<condition-variable>) 
  (result (-> (SG_CONDITION_VARIABLE cv) specific)))

(define-c-proc condition-variable-specific-set!
  (cv::<condition-variable> value) ::<void>
  (set! (-> (SG_CONDITION_VARIABLE cv) specific) value))

(define-c-proc condition-variable-signal! (cv::<condition-variable>) ::<void>
  (Sg_ConditionVariableSignal (SG_CONDITION_VARIABLE cv)))

(define-c-proc condition-variable-broadcast!
  (cv::<condition-variable>) ::<void>
  (Sg_ConditionVariableBroadcast (SG_CONDITION_VARIABLE cv)))

(define-c-proc sys-nanosleep (n::<number>) 
  (result (Sg_MakeInteger (Sg_SysNanosleep (Sg_GetDouble n)))))
