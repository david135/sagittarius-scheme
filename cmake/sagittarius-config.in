#!@CMAKE_INSTALL_PREFIX@/bin/sash

#!read-macro=sagittarius/regex
(import (rnrs) (sagittarius control)
	(sagittarius regex))

(define *installed-version* "@SAGITTARIUS_VERSION@")

(define (check-version)
  (or (string=? *installed-version* (sagittarius-version))
      (error 'sagittarius-config
	     "installed version and Sagittarius version are different")))

(define *one-char-table* '((I . include-path)
			   (V . version)
			   (L . library-path)
			   (l . libraries)))

(define (usage)
  (print "Usage sagittarius-config [option]

General parameter
  -V	the current Sagittarius version

Paremters to compile an application using Sagittarius
  -I	include paths required to compile programs using Sagittarius.
  -L	library paths required to link Sagittarius installation directory.
  -l	libraries required to link programs using Sagittarius.
  --arch
	prints the architecture signature.
  --c-flags
	prints the used CFLAGS.
  --cxx-flags
	prints the used CXXFLAGS.
   --sharedir
	prints the paths of Sagittarius' shread directory.
   --incdir,--sysincdir
	prints the paths of Sagittarius' include files directory.
   --syslibdir
	prints the paths of Sagittarius' library directory.
   --sysarchdir
	prints the paths of Sagittarius' system architecture directory.
   --pkgincdir
	prints the paths of Sagittarius' include files directory without
	installed prefix
   --pkglibdir
	prints the paths of Sagittarius' library directory without
	installed prefix
   --pkgarchdir
	prints the paths of Sagittarius' system architecture directory without
	installed prefix
")
  (exit 1))

(define (resolve-flag flag)
  (define (emit s) (display s) (display #\space))
  (case flag
    ((include-path)
     (emit "-I${CMAKE_INSTALL_PREFIX}/${SAGITTARIUS_CURRENT_LIB}/include"))
    ((version)
     (emit *installed-version*))
    ((libraries)
     ;; FIXME I want to get this from CMake definitions
     (emit "-lpthread -ldl -lm -lsagittarius"))
    ((c-flags)
     (emit "@CMAKE_C_FLAGS@"))
    ((cxx-flags)
     (emit "@CMAKE_CXX_FLAGS@"))
    ((library-path)
     (emit "-L@SAGITTARIUS_DYNLIB_PATH@"))
    ((arch)
     (emit "@SAGITTARIUS_TRIPLE@"))
    ((incdir sysincdir)
     (emit "${CMAKE_INSTALL_PREFIX}/${SAGITTARIUS_CURRENT_LIB}/include"))
    ((sharedir)
     (emit "${CMAKE_INSTALL_PREFIX}/${SAGITTARIUS_CURRENT_SHARE}"))
    ;; for now only pkg and sys
    ((syslibdir)
     (emit "${CMAKE_INSTALL_PREFIX}/${SAGITTARIUS_CURRENT_SHARE}/lib"))
    ((sysarchdir)
     (emit "@SAGITTARIUS_DYNLIB_PATH@"))
    ((pkglibdir)
     (emit "${SAGITTARIUS_SHARE_SUFFIX}/sitelib"))
    ((pkgarchdir)
     (emit "${SAGITTARIUS_LIB_SUFFIX}/sitelib/${SAGITTARIUS_TRIPLE}"))
    (else
     (usage))))

(define (parse-argument args)
  (let loop ((args args)
	     (r '()))
    (cond ((null? args) (reverse! r))
	  ((matches #/-(\w)/ (car args)) ;; one char
	   => (lambda (m) 
		(or (and-let* ((s (string->symbol (m 1)))
			       (def (assq s *one-char-table*)))
		      (loop (cdr args)
			    (cons (cdr def) r)))
		    (usage))))
	  ((matches #/--([\w-]+)/ (car args))
	   => (lambda (m)
		;; let resolve-flag do it
		(loop (cdr args)
		      (cons (string->symbol (m 1)) r))))
	  (else (usage)))))

(define (main args)
  (check-version)
  (let1 flags (parse-argument (cdr args))
    (when (null? flags)
      (usage))
    (for-each (lambda (flag)
		(resolve-flag flag)) flags))
  (newline)
  0)

;; Local Variables:
;; mode: scheme
;; coding: utf-8
;; End: