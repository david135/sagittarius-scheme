CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(Sagittarius)

INCLUDE(${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)

ENABLE_TESTING()

# basic info for project
SET(SAGITTARIUS_NAME "sagittarius" CACHE STRING "Sagittarius PACKAGE_NAME")
SET(SAGITTARIUS_BUGREPORT "ktakashi@ymail.com" CACHE STRING "bugreport mail address")

# INCLUDE(${CMAKE_ROOT}/Modules/InstallRequiredSystemLibraries.cmake)
# SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Sagittarius Scheme")
# SET(CPACK_PACKAGE_VENDOR "Takashi Kato<${SAGITTARIUS_BUGREPORT}>")
# SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README")
# SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright")
# SET(CPACK_PACKAGE_VERSION_MAJOR "0")
# SET(CPACK_PACKAGE_VERSION_MINOR "0")
# SET(CPACK_PACKAGE_VERSION_PATCH "1")
# SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
# IF(WIN32 AND NOT UNIX)
#   # There is a bug in NSI that does not handle full unix paths properly. Make
#   # sure there is at least one set of four (4) backlasshes.
#   SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
#   SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\${SAGITTARIUS_NAME}.exe")
#   SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} ")
#   #SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
#   #SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
#   SET(CPACK_NSIS_CONTACT "${SAGITTARIUS_BUGREPORT}")
#   SET(CPACK_NSIS_MODIFY_PATH ON)
# ELSE()
#   SET(CPACK_STRIP_FILES "bin/${SAGITTARIUS_NAME}")
#   #SET(CPACK_SOURCE_STRIP_FILES "")
# ENDIF()
# SET(CPACK_PACKAGE_EXECUTABLES "${SAGITTARIUS_NAME}" "Sagittarius Scheme package")
# INCLUDE(CPack)


# use boehm gc
OPTION(USE_BOEHM_GC "use boehm gc" ON)
OPTION(DEBUG_VERSION "debug version" ON)
OPTION(SAGITTARIUS_PROFILE "profiler" ON)

SET(INSTALL_PREFIX "/usr/local" CACHE PATH "Prefix prepended to install directories")
SET(CMAKE_INSTALL_PREFIX ${INSTALL_PREFIX} CACHE INTERNAL "Prefix prepended to install directories" FORCE)

#SET(SAGITTARIUS_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}"
#  CACHE STRING "Sagittarius release version string")
SET(SAGITTARIUS_VERSION "0.0.6" CACHE STRING "Sagittarius release version string")

IF(WIN32)
  # On Windows platform, we resolve library path relatively.
  # Diractory structure must be like this:
  # <install dir>\sash.exe
  #               sagittarius.dll
  #              \lib\${version}\lib
  #              \sitelib
  SET(SAGITTARIUS_SHARE_LIB_PATH "lib")
  SET(SAGITTARIUS_SITE_LIB_PATH  "sitelib")
ELSE()
  SET(SAGITTARIUS_SHARE_LIB_PATH "${CMAKE_INSTALL_PREFIX}/share/${SAGITTARIUS_NAME}/${SAGITTARIUS_VERSION}/lib")
  SET(SAGITTARIUS_SITE_LIB_PATH "${CMAKE_INSTALL_PREFIX}/share/${SAGITTARIUS_NAME}/sitelib")
  #SET(SAGITTARIUS_LIB_PATH "${CMAKE_INSTALL_PREFIX}/lib/${SAGITTARIUS_NAME}/${SAGITTARIUS_VERSION}/lib")
ENDIF()

MARK_AS_ADVANCED(SAGITTARIUS_VERSION SAGITTARIUS_BUGREPORT
  SAGITTARIUS_NAME SAGITTARIUS_SHARE_LIB_PATH SAGITTARIUS_LIB_PATH)

IF(USE_BOEHM_GC)
  CHECK_INCLUDE_FILE(gc.h HAVE_GC_H)
  SET(LINK_BOEHM_GC true)
  IF(NOT HAVE_GC_H)
    CHECK_INCLUDE_FILE(gc/gc.h HAVE_GC_GC_H)
    IF(NOT HAVE_GC_GC_H)
      MESSAGE(FATAL "sagittarius requires boehm gc.")
#      SET(LINK_BOEHM_GC false)
#      ADD_SUBDIRECTORY(taurus build/taurus)
#      SET(TAURUS_INCLUDE_DIR ${TAURUS_INCLUDE_DIR} ${PROJECT_SOURCE_DIR}/taurus/src)
    ENDIF(NOT HAVE_GC_GC_H)
  ELSE(NOT HAVE_GC_H)
#    ADD_DEFINITIONS(-DUSE_BOEHM_GC)
  ENDIF(NOT HAVE_GC_H)
ENDIF(USE_BOEHM_GC)

IF(SAGITTARIUS_PROFILE)
  CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
  IF(NOT HAVE_SYS_TIME_H)
    MESSAGE(WARN "profiler is not supported")
    SET(SAGITTARIUS_PROFILE OFF)
  ENDIF()
ENDIF()

IF(DEBUG_VERSION)
  ADD_DEFINITIONS(-DDEBUG_VERSION)
  SET(CMAKE_BUILD_TYPE Debug)
ELSE()
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()

# headers
CHECK_INCLUDE_FILE(alloca.h HAVE_ALLOCA_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(stdio.h  HAVE_STDIO_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILE(setjmp.h HAVE_SETJMP_H)
CHECK_INCLUDE_FILE(time.h   HAVE_TIME_H)
CHECK_INCLUDE_FILE(signal.h HAVE_SIGNAL_H)

# functions
CHECK_FUNCTION_EXISTS(alloca HAVE_ALLOCA)

# sizeofs
CHECK_TYPE_SIZE(int SIZEOF_INT)
CHECK_TYPE_SIZE(short SIZEOF_SHORT)
CHECK_TYPE_SIZE(long SIZEOF_LONG)
CHECK_TYPE_SIZE(int64_t SIZEOF___INT64)
#CHECK_TYPE_SIZE(off_t SIZEOF_OFF_T)
CHECK_TYPE_SIZE(void* SIZEOF_VOIDP)
CHECK_TYPE_SIZE(float SIZEOF_FLOAT)
CHECK_TYPE_SIZE(double SIZEOF_DOUBLE)
CHECK_TYPE_SIZE(wchar_t SIZEOF_WCHAR_T)


CONFIGURE_FILE(cmake/config-cmake.h.in ${PROJECT_SOURCE_DIR}/src/sagittarius/config.h)
ADD_DEFINITIONS(-DHAVE_CONFIG_H)

# TODO check if it's ok
#SET(CMAKE_C_FLAGS "-W -Wall -O0 -g3 -gdwarf-2")
SET(CMAKE_C_FLAGS "-Wall -O2")

SET(SAGITTARIUS_INCLUDE_DIR ${SAGITTARIUS_INCLUDE_DIR} 
  ${PROJECT_SOURCE_DIR}/src ${TAURUS_INCLUDE_DIR})

# set runtime output directory
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
  ${PROJECT_SOURCE_DIR}/build)

ADD_SUBDIRECTORY(src build/src)
#ADD_SUBDIRECTORY(test build/test)

INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/lib
  DESTINATION share/sagittarius/${SAGITTARIUS_VERSION})
INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/sitelib
  DESTINATION share/sagittarius/)

# uninstall target
CONFIGURE_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)

ADD_CUSTOM_TARGET(uninstall
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
