;; because of (array-data) and so...
(define (vm-dump-code cb . inner)
  (define (shorten-object o)
    (cond ((pair? o)
	   (let ((s (x->string o)))
	     (if (> (string-length s) 30)
		 (substring s 0 30)
		 o)))
	  ((identifier? o)
	   (format "identifier#~s" (id-name o)))
	  ((vector? o)
	   (vector-ref o 0))
	  (else
	   o)))
  (define label?
    (lambda (l)
      (and (vector? l)
	   (> (vector-length l) 0)
	   (eqv? (vector-ref l 0) 11 #;$LABEL))))

  (define (unwrap sexp)
    (let loop ((sexp sexp)
	       (r '()))
      (cond ((null? sexp)
	     (reverse r))
	    ((identifier? sexp)
	     (id-name sexp))
	    ((pair? sexp)
	     (loop (car sexp)
		   (loop (cdr sexp)
			 r)))
	    (else
	     sexp))))
  
  (let ((data (array-data (code-builder-code cb)))
	(length (array-length (code-builder-code cb))))
    (format #t "~asize: ~a~%" (if (null? inner) "" (car inner)) length)
    ;(format #t "original code: ~%~s~%~%" data)
    (when (null? inner)
      (print "VM code:"))
    (let loop ((i 0))
      (if (>= i length)
	  (newline)
	  (let ((insn (vector-ref data i)))
	    (cond ((label? insn)
		   (format #t "#<label>~%")
		   (loop (+ i 1)))
		  (else
		   (let ((info (lookup-insn-name (get-insn insn))))
		     (flush-output-port (current-output-port))
		     (or (pair? info)
			 (errorf "invalid insn: ~a" insn))
		     (let ((name (car info))
			   (inst-values (cadr info))
			   (argc (caddr info))
			   (src? (cadddr info)))
		       (format #t "~a    ~a ~s" (if (null? inner) "" (car inner)) i name)
		       (let inst ((i 0))
			 (unless (= i inst-values)
			   (if (= i 0)
			       (display "(")
			       (display " "))
			   (display (get-insn-value insn inst-values i))
			   (inst (+ i 1))))
		       (unless (zero? inst-values)
			 (display ")"))
		       (let loop2 ((j 1))
			 (if (> j argc)
			     (begin
			       (if src?
				   (begin
				     (display " ;;")
				     (cond ((assv i (code-builder-src cb))
					    => (lambda (src)
						 (format #t " ~,,,,50s" (unwrap (cdr src))))))))
			       ;(format #t "  ;; ~x" insn)
			       (newline)
			       (flush-output-port (current-output-port))
			       (loop (+ i j)))
			     (let ((arg (vector-ref data (+ i j))))
			       (cond  ((code-builder? arg)
				       (begin
					 (format #t " ~a" (vector-ref arg 0))
					 (newline)
					 (format #t "~a Closure: ~%" (if (null? inner) "" (car inner)))
					 (vm-dump-code arg (string-append "  " (if (null? inner) ""
										   (car inner))))))
				      ((label? arg)
				       (format #t " #<label> "))
				      (else
				       (format #t " ~s" (if (identifier? arg) (id-name arg) (shorten-object arg)))))
			       (loop2 (+ j 1))))))))))))))
;;;; end of file
;; Local Variables:
;; coding: utf-8-unix
;; End:
