(library (core syntax template)
    (export :all)
    (import (core)
	    (core errors)
	    (core syntax pattern)
	    (core misc)
	    (sagittarius))
  ;; from Ypsilon
  (define collect-rename-ids
    (lambda (template ranks)
      (let ((ids (collect-unique-ids template)))
	(let loop ((lst ids))
	  (if (null? lst)
	      lst
	      (if (assq (car lst) ranks)
		  (loop (cdr lst))
		  (cons (car lst) (loop (cdr lst)))))))))

  (define (parse-ellipsis-splicing form rename compare)
    (let loop ((len 2) (tail (cdddr form)))
      (cond ((and (pair? tail) (compare (car tail) (rename '...)))
	     (loop (+ len 1) (cdr tail)))
	    (else
	     (values (list-head form len) tail len)))))

  (define (rank-of name ranks)
    (let ((slot (assq name ranks)))
      (if slot (cddr slot) -1)))

  (define (check-template tmpl ranks rename compare)
    (define (control-patvar-exists? tmpl depth)
      (let loop ((lst tmpl) (depth depth))
	(cond ((variable? lst)
	       (>= (rank-of lst ranks) depth))
	      ((ellipsis-quote? lst rename compare)
	       (any1 (lambda (id) (>= (rank-of id ranks) depth)) (collect-unique-ids lst)))
	      ((ellipsis-splicing-pair? lst rename compare)
	       (receive (body tail len) (parse-ellipsis-splicing lst rename compare)
		 (or (loop body (+ depth 1))
		     (and (loop body 1)
			  (loop tail depth)))))
	      ((ellipsis-pair? lst rename compare)
	       (or (loop (car lst) (+ depth 1))
		   (and (loop (car lst) 1)
			(loop (cddr lst) depth))))
	      ((pair? lst)
	       (or (loop (car lst) depth)
		   (loop (cdr lst) depth)))
	      ((vector? lst)
	       (loop (vector->list lst) depth))
	      (else #f))))

    (define (check-escaped lst depth)
      (let loop ((lst lst))
	(cond ((variable? lst)
	       (and (< 0 (rank-of lst ranks) depth)
		    (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl lst)))
	      ((pair? lst)
	       (loop (car lst))
	       (loop (cdr lst)))
	      ((vector? lst)
	       (loop (vector->list lst))))))

    (if (and (= (safe-length tmpl) 2) (compare (car tmpl) (rename '...)))
	(check-escaped (cadr tmpl) 0)
	(let loop ((lst tmpl) (depth 0))
	  (cond ((variable? lst)
		 (and (compare lst (rename '...))
		      (syntax-violation "syntax template" "misplaced ellipsis" tmpl))
		 (and (> (rank-of lst ranks) depth)
		      (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl lst)))
		((ellipsis-quote? lst rename compare)
		 (check-escaped (cadr lst) depth))
		((ellipsis-splicing-pair? lst rename compare)
		 (receive (body tail len) (parse-ellipsis-splicing lst rename compare)
		   (and (= depth 0)
			(or (control-patvar-exists? (car lst) len)
			    (syntax-violation "syntax template" "missing pattern variable that used in same level as in pattern" tmpl lst)))
		   (loop body (+ depth 1))
		   (loop tail depth)))
		((ellipsis-pair? lst rename compare)
		 (cond ((variable? (car lst))
			(let ((rank (rank-of (car lst) ranks)))
			  (cond ((< rank 0)
				 (syntax-violation "syntax template" "misplace ellipsis following literal" tmpl (car lst)))
				((> rank (+ depth 1))
				 (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl (car lst)))
				(else
				 (loop (cddr lst) depth)))))
		       ((pair? (car lst))
			(and (= depth 0)
			     (or (control-patvar-exists? (car lst) (+ depth 1))
				 (syntax-violation "syntax template" "missing pattern variable that used in same level as in pattern" tmpl (car lst))))
			(loop (car lst) (+ depth 1))
			(loop (cddr lst) depth))
		       ((null? (car lst))
			(syntax-violation "syntax template" "misplaced ellipsis following empty list" tmpl))
		       (else
			(syntax-violation "syntax template" "misplaced ellipsis following literal" tmpl (car lst)))))
		((pair? lst)
		 (loop (car lst) depth)
		 (loop (cdr lst) depth))
		((vector? lst)
		 (loop (vector->list lst) depth))))))


  (define (generate-output tmplate ranks rename compare expr emit)
    (let ((_if (rename 'if))    (_loop (rename 'loop))
	  (_let (rename 'let))  (_cdr (rename 'cdr))
	  (_car (rename 'car))  (_quote (rename 'quote))
	  (_lambda (rename 'lambda)) (_l (rename 'l))
	  (_letrec (rename 'letrec)) (_null? (rename 'null?))
	  (_pair? (rename 'pair?)) (_temp (rename 'temp))
	  (_vector? (rename 'vector?)) (_equal? (rename 'equal?))
	  (_or (rename 'or))    (_symbol? (rename 'symbol?))
	  (_list? (rename 'list?)) (_> (rename '>))
	  (_and (rename 'and))   (_n (rename 'n))
	  (_- (rename '-))      (_= (rename '=))
	  (_cons (rename 'cons)) (_map (rename 'map))
	  (_append (rename 'append)) (_apply (rename 'apply))
	  (_identifier? (rename 'identifier?))
	  (_list->vector (rename 'list->vector))
	  (_vector->list (rename 'vector->list))
	  (_rename (rename 'rename)) (_compare (rename 'compare)))

      (define (free-vars x ranks dim)
	(let lp ((x x) (free '()))
	  (cond ((variable? x)
		 (if (and (not (id-memq x free))
			  (cond ((assq x ranks)
				 => (lambda (cell)
				      (>= (cddr cell) dim)))
				(else #f)))
		     (cons x free)
		     free))
		((pair? x) (lp (car x) (lp (cdr x) free)))
		((vector? x) (lp (vector->list x) free))
		(else free))))
      (define (ellipsis-depth x)
	(if (ellipsis-pair? x rename compare)
	    (+ 1 (ellipsis-depth (cdr x)))
	    0))
      (define (ellipsis-tail x)
	(if (ellipsis-pair? x rename compare)
	    (ellipsis-tail (cdr x))
	    (cdr x)))

      (define (expand-var tmpl dim)
	(cond ((any (lambda (v) (compare tmpl (car v))) ranks)
	       => (lambda (cell)
		    (if (<= (cddr cell) dim)
			(cadr cell)
			(syntax-violation "syntax template"
					  "too few ...'s"
					  tmplate
					  tmpl))))
	      (else
	       `(,_rename (,_quote ,tmpl)))))
      (define (expand-escaped-template tmpl dim)
	(cond ((variable? tmpl)
	       (expand-var tmpl dim))
	      ((pair? tmpl)
	       (if (and emit (null? (car tmpl)))
		   (cons '()
			 (expand-escaped-template (cdr tmpl) dim))
		   (cons (expand-escaped-template (car tmpl) dim)
			 (expand-escaped-template (cdr tmpl) dim))))
	      ((vector? tmpl)
	       (list->vector (expand-escaped-template (vector->list tmpl) dim)))
	      (else tmpl)))

      (define (loop tmpl dim)
	(cond ((variable? tmpl)
	       (expand-var tmpl dim))
	      ((ellipsis-quote? tmpl rename compare)
	       `(,_quote ,(if (pair? (cdr tmpl))
			      (if (pair? (cddr tmpl)) (cddr tmpl) (cadr tmpl))
			      (cdr tmpl))))
	      ((ellipsis-splicing-pair? tmpl rename compare)
	       (expand-escaped-template (cadr tmpl) dim))
	      ;; (p ...)
	      ((ellipsis-pair? tmpl rename compare)
	       (let* ((depth (ellipsis-depth tmpl))
		      (ell-dim (+ dim depth))
		      (ell-vars (free-vars (car tmpl) ranks ell-dim)))
		 (if (null? ell-vars)
		     (syntax-violation "syntax template"
				       "too many ...'s"
				       tmplate
				       tmpl)	;; this must be something else
		     (let* ((once (loop (car tmpl) ell-dim))
			    (nest (if (and (null? (cdr ell-vars))
					   (variable? once)
					   (eq? once (car ranks)))
				      once ;; shortcut
				      `(,_map (,_lambda ,ell-vars ,once)
					      ,@ell-vars)))
			    (many (do ((d depth (- d 1))
				       (many nest
					     `(,_apply ,_append ,many)))
				      ((= d 1) many))))
		       (if (null? (ellipsis-tail tmpl))
			   many ;; shortcut
			   `(,_append ,many ,(loop (ellipsis-tail tmpl) dim)))))))
	      ((pair? tmpl)
	       `(,_cons ,(loop (car tmpl) dim)
			,(loop (cdr tmpl) dim)))
	      ((vector? tmpl)
	       `(,_list->vector ,(loop (vector->list tmpl) dim)))
	      ((null? tmpl)
	       `(,_quote ()))
	      (else tmpl)))
      (loop tmplate 0)))

  

)
;; end of file
;; Local Variables:
;; coding: utf-8-unix
;; End: