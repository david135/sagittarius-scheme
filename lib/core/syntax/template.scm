(library (core syntax template)
    (export :all)
    (import (core)
	    (core errors)
	    (core syntax pattern)
	    (core misc)
	    (sagittarius))
  ;; from Ypsilon
  (define collect-rename-ids
    (lambda (template ranks)
      (let ((ids (collect-unique-ids template)))
	(let loop ((lst ids))
	  (if (null? lst)
	      lst
	      (if (assq (car lst) ranks)
		  (loop (cdr lst))
		  (cons (car lst) (loop (cdr lst)))))))))

  (define (parse-ellipsis-splicing form rename compare)
    (let loop ((len 2) (tail (cdddr form)))
      (cond ((and (pair? tail) (compare (car tail) (rename '...)))
	     (loop (+ len 1) (cdr tail)))
	    (else
	     (values (list-head form len) tail len)))))

  (define (rank-of name ranks)
    (let ((slot (assq name ranks)))
      (if slot (cdr slot) -1)))

  (define (check-template tmpl ranks rename compare)
    (define (control-patvar-exists? tmpl depth)
      (let loop ((lst tmpl) (depth depth))
	(cond ((symbol? lst)
	       (>= (rank-of lst ranks) depth))
	      ((ellipsis-quote? lst rename compare)
	       (any1 (lambda (id) (>= (rank-of id ranks) depth)) (collect-unique-ids lst)))
	      ((ellipsis-splicing-pair? lst rename compare)
	       (let-values (((body tail len) (parse-ellipsis-splicing lst rename compare)))
		 (or (loop body (+ depth 1))
		     (and (loop body 1)
			  (loop tail depth)))))
	      ((ellipsis-pair? lst rename compare)
	       (or (loop (car lst) (+ depth 1))
		   (and (loop (car lst) 1)
			(loop (cddr lst) depth))))
	      ((pair? lst)
	       (or (loop (car lst) depth)
		   (loop (cdr lst) depth)))
	      ((vector? lst)
	       (loop (vector->list lst) depth))
	      (else #f))))

    (define (check-escaped lst depth)
      (let loop ((lst lst))
	(cond ((symbol? lst)
	       (and (< 0 (rank-of lst ranks) depth)
		    (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl lst)))
	      ((pair? lst)
	       (loop (car lst))
	       (loop (cdr lst)))
	      ((vector? lst)
	       (loop (vector->list lst))))))

    (if (and (= (safe-length tmpl) 2) (compare (car tmpl) (rename '...)))
	(check-escaped (cadr tmpl) 0)
	(let loop ((lst tmpl) (depth 0))
	  (cond ((symbol? lst)
		 (and (compare lst (rename '...))
		      (syntax-violation "syntax template" "misplaced ellipsis" tmpl))
		 (and (> (rank-of lst ranks) depth)
		      (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl lst)))
		((ellipsis-quote? lst rename compare)
		 (check-escaped (cadr lst) depth))
		((ellipsis-splicing-pair? lst rename compare)
		 (receive (body tail len) (parse-ellipsis-splicing lst rename compare)
		   (and (= depth 0)
			(or (control-patvar-exists? (car lst) len)
			    (syntax-violation "syntax template" "missing pattern variable that used in same level as in pattern" tmpl lst)))
		   (loop body (+ depth 1))
		   (loop tail depth)))
		((ellipsis-pair? lst rename compare)
		 (cond ((symbol? (car lst))
			(let ((rank (rank-of (car lst) ranks)))
			  (cond ((< rank 0)
				 (syntax-violation "syntax template" "misplace ellipsis following literal" tmpl (car lst)))
				((> rank (+ depth 1))
				 (syntax-violation "syntax template" "too few ellipsis following subtemplate" tmpl (car lst)))
				(else
				 (loop (cddr lst) depth)))))
		       ((pair? (car lst))
			(and (= depth 0)
			     (or (control-patvar-exists? (car lst) (+ depth 1))
				 (syntax-violation "syntax template" "missing pattern variable that used in same level as in pattern" tmpl (car lst))))
			(loop (car lst) (+ depth 1))
			(loop (cddr lst) depth))
		       ((null? (car lst))
			(syntax-violation "syntax template" "misplaced ellipsis following empty list" tmpl))
		       (else
			(syntax-violation "syntax template" "misplaced ellipsis following literal" tmpl (car lst)))))
		((pair? lst)
		 (loop (car lst) depth)
		 (loop (cdr lst) depth))
		((vector? lst)
		 (loop (vector->list lst) depth))))))


  (define (generate-output tmpl ranks rename compare expr emit)
    (let ((_if (rename 'if))    (_loop (rename 'loop))
	  (_let (rename 'let))  (_cdr (rename 'cdr))
	  (_car (rename 'car))  (_quote (rename 'quote))
	  (_lambda (rename 'lambda)) (_l (rename 'l))
	  (_letrec (rename 'letrec)) (_null? (rename 'null?))
	  (_pair? (rename 'pair?)) (_temp (rename 'temp))
	  (_vector? (rename 'vector?)) (_equal? (rename 'equal?))
	  (_or (rename 'or))    (_symbol? (rename 'symbol?))
	  (_list? (rename 'list?)) (_> (rename '>))
	  (_and (rename 'and))   (_n (rename 'n))
	  (_- (rename '-))      (_= (rename '=))
	  (_cons (rename 'cons))
	  (_identifier? (rename 'identifier?))
	  (_list->vector (rename 'list->vector))
	  (_vector->list (rename 'vector->list))
	  (_rename (rename 'rename)) (_compare (rename 'compare)))
      (define (expand-var tmpl dim)
	(cond ((assq tmpl ranks)
	       => (lambda (slot)
		    (cond ((null? (cdr slot)) '())
			  (emit (emit (cadr slot)))
			  (else `',(car slot)))))
	      (else
	       (assertion-violation "syntax template"
				    "subforms have different size of matched input"
				    `(template: ,expr)))))

      (define (loop tmpl dim)
	(cond ((variable? tmpl)
	       (if (< (rank-of tmpl ranks) 0)
		   (cond ((assq tmpl ranks)
			  => cdr)
			 (else 
			  `(,_rename (,_quote ,tmpl))))
		   (expand-var tmpl dim)))
	      ((pair? tmpl)
	       `(,_cons ,(loop (car tmpl) dim)
			,(loop (cdr tmpl) dim)))
	      ((vector? tmpl)
	       `(,_list->vector ,(loop (vector->list tmpl) dim)))
	      ((null? tmpl)
	       `(,_quote ()))
	      (else tmpl)))
      (loop tmpl 0)))

  

)
;; end of file
;; Local Variables:
;; coding: utf-8-unix
;; End: