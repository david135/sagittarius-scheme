;; -*- mode:scheme; coding: utf-8; -*-
(library (sagittarius clos)
    (export slot-ref slot-set!
	    add-method
	    ;; internals
	    make-generic
	    make-method
	    ;; helpers
	    compute-std-cpl
	    compute-std-slots
	    compute-std-getters-and-setters
	    class-of
	    )
    (import :none)

  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius.h> <sagittarius/generic.h>))

  (define-c-proc slot-ref (o name::Symbol) ::Object
    (result (Sg_SlotRef o name)))

  (define-c-proc slot-set! (o name::Symbol v) ::void
    (Sg_SlotSet o name v))

  (define-c-proc add-method (gf::Generic m::Method) ::void
    (Sg_AddMethod gf m))

  (define-c-proc make-generic (:optional (name #f)) ::Object
    (result (Sg_MakeGeneric name)))

  (define-c-proc make-method (spec proc) ::Object
    (result (Sg_MakeMethod spec proc)))

  (define-c-proc compute-std-cpl (klass::Class) ::Object
    (result (Sg_ComputeCPL klass)))

  (define-c-proc compute-std-slots (klass::Class) ::Object
    (result (Sg_ComputeSlots klass)))

  (define-c-proc compute-std-getters-and-setters (klass::Class slots) ::Object
    (result (Sg_ComputeGettersAndSetters klass slots)))

  (define-c-proc class-of (o) ::Object
    (result (Sg_ClassOf o)))

)