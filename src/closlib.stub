;; -*- mode:scheme; coding: utf-8; -*-
(library (sagittarius clos)
    (export slot-ref slot-set!
	    slot-ref-using-accessor
	    slot-set-using-accessor!
	    class-of
	    is-a?
	    eql
	    %make-next-method
	    )
    (import :none)

  (decl-code
   (.define "LIBSAGITTARIUS_BODY")
   (.include <sagittarius.h> <sagittarius/generic.h>))

  (define-c-proc slot-ref (o name::<symbol>)
    (setter slot-set!)
    Sg_VMSlotRef)

  (define-c-proc slot-set! (o name::<symbol> v) Sg_VMSlotSet)

  (define-c-proc slot-ref-using-accessor (o sa::<slot-accessor>)
    Sg_SlotRefUsingAccessor)

  (define-c-proc slot-set-using-accessor! (o sa::<slot-accessor> v) ::<void>
    Sg_SlotSetUsingAccessor)

  (define-c-proc slot-bound? (o name::<symbol>) Sg_VMSlotBoundP)

  (define-c-proc class-of (o) Sg_ClassOf)

  (define-c-proc is-a? (o klass) ::<boolean> Sg_TypeP)

  (define-cfn call-fallback-proc (args::SgObject* nargs::int gf::SgGeneric*)
    :static
    (return (Sg_VMApply (SG_OBJ (-> gf data)) (Sg_ArrayToList args nargs))))

  (define-c-proc %ensure-generic-function (name::<symbol> lib::<library>)
    (let ((g::SgGloc* (Sg_FindBinding lib name #f))
	  (val #f))
      (when (SG_GLOCP g)
	(set! val (SG_GLOC_GET g)))
      (when (not (Sg_TypeP val SG_CLASS_GENERIC))
	(if (or (SG_SUBRP val) (SG_CLOSUREP val))
	    (set! val (Sg_MakeBaseGeneric (SG_OBJ name) call-fallback-proc val))
	    (set! val (Sg_MakeBaseGeneric (SG_OBJ name) NULL NULL))))
      (Sg_InsertBinding lib name val)
      (result val)))

  (define-c-proc %make-next-method (gf methods::<list> args::<list>)
    (let ((argv::SgObject*) (argc::int))
      (unless (Sg_TypeP gf SG_CLASS_GENERIC)
	(Sg_WrongTypeOfArgumentViolation
	 '%make-next-method
	 'generic gf (SG_LIST3 gf methods args)))
      (dolist (mp methods)
	(unless (Sg_TypeP mp SG_CLASS_METHOD)
	  (Sg_WrongTypeOfArgumentViolation '%make-next-method
					   'method mp
					   (SG_LIST3 gf methods args))))
      (set! argc (Sg_Length args))
      (set! argv (Sg_ListToArray args FALSE))
      (result (Sg_MakeNextMethod (SG_GENERIC gf) methods argv argc
				 FALSE))))

  (define-c-proc eql (o) Sg_MakeEqlSpecializer)

  (define-c-proc %method-more-specific? (m1::<method> m2::<method> args)
    Sg_MethodMoreSpecificP)
  )
