;; -*- scheme -*-
(import (rnrs)
	(sagittarius io)
	(sagittarius vm)
	(sagittarius regex)
	(sagittarius object)
	(sagittarius control)
	(sagittarius cgen cise)
	(sagittarius cgen unit)
	(sagittarius cgen syntax)
	(match)
	(shorten)
	(pp)
	(srfi :2 and-let*)
	(srfi :13 strings)
	(srfi :26 cut)
	(srfi :39 parameters)
	(util file)
	(util list)
	(clos user))

(define *preamble*
  (list "/* Generated automatically from boot/instructions.scm */"
	"/* DO NOT EDIT */"))

(define *unit*
  (make <cgen-unit>
    :name "vminsn"
    :preamble *preamble*
    :c-file   "vminsn.c"
    ;;:h-file   "sagittarius/instruction.h"
    :init-prologue ""
    :init-epilogue ""))

(define (find-insn name insns)
  (find (^i (eq? name (~ i'name))) insns))

(define-class <vm-insn-info> ()
  ((name :init-keyword :name)
   (code :init-keyword :code)
   (vals :init-keyword :vals)
   (argc :init-keyword :argc)
   (body :init-keyword :body)
   (src? :init-keyword :src?)
   (label? :init-keyword :label?)
   (return? :init-keyword :return?)
   (combined :init-keyword :combined)
   (push-variant :init-value #f)
   (base-variant :init-value #f)
   (ret-variant :init-value #f)
   ))

(define (expand-toplevels file)
  (fold (lambda (form seed)
	  (match form
	    (('define-inst . _) (cons form seed))
	    (('define-cise-stmt . _) (eval form (vm-current-library)) seed)
	    (('define-cise-expr . _) (eval form (vm-current-library)) seed)
	    (else (error 'expand-toplevels
			 "invalid form in vm instruction definition" form))))
	'()
	(file->list (cut read/ss <> :source-info? #t) file)))

(define (parse-define-inst insn-num definsn)
  (define (parse-keywords form)
    (let loop ((form form)
	       (return? #f)
	       (label? #f)
	       (combined #f))
      (match form
	((:label . rest) (loop (cdr form) return? #t combined))
	((:return . rest) (loop (cdr form) #t label? combined))
	((:combined . rest)
	 (values return? label? (car rest) #f))
	(_ (values return? label? combined form)))))

  (match definsn
    ((_ name (insn-argc argc src?) . rest)
     (let-values (((return? label? combined body) (parse-keywords rest)))
       (make <vm-insn-info>
	 :name name :code insn-num :vals insn-argc :argc argc
	 :src? src? :label? label? :return? return? :combined combined
	 :body body)))
    (_ (error 'parse-define-inst
	      "malformed define-inst" definsn))))

(define (populate-insn-info definsns)
  (let1 insns (map-with-index parse-define-inst definsns)
    (dolist (insn insns)
      (and-let* ((comb (~ insn'combined)))
	(define (wire suffix slot)
	  (let* ((basename (string->symbol
			    (cond
			     ((matches (regex (format "(.*)(-|_)~a" suffix))
				       (->string (~ insn'name)))
			      => (^m (m 0))))))
		 (baseinsn (find (^i (eq? (~ i'name) basename)) insns)))
	    (set! (~ baseinsn slot) insn)
	    (set! (~ insn 'base-variant) baseinsn)))
	(case (car (last-pair comb))
	  ((PUSH) (wire "PUSH" 'push-variant))
	  ((RET) (wire "RET" 'ret-variant))))
      )
    insns))

;; used by instruction.scm
(define result-type (make-parameter 'reg))
(define insn-alist (make-parameter '()))

(define (construct-vm-body insns)
  (define (case-label insn)
    (cgen-body (format "\nlabel_~a:\nCASE(~a) " 
		       (cgen-safe-name-friendly (->string (~ insn'name)))
		       (cgen-safe-name-friendly (->string (~ insn'name))))))
  (define (base-cise base)
    (and-let* ((base-insn (find-insn base insns)))
      (~ base-insn 'body)))
  (define (symbol-join syms)
    (string->symbol (string-join (map ->string syms) "_")))
  (define (simple-join comb)
    (for-each (^c (cond 
		   ((assq c (insn-alist))
		    => (^i (render1 (cdr i))))
		   (else
		    (error 'construct-vm-body
			   "combined insn appeared before its parent definition"
			   c))))
	      comb))
  (define (do-combined insn comb)
    (match comb
      ((base 'PUSH)
       (and-let* ((cise (base-cise base)))
	 (parameterize ((result-type 'push)) (render cise))))
      ((base 'RET)
       (and-let* ((cise (base-cise base)))
	 (parameterize ((result-type 'ret)) (render cise))))
      ((base (and (or 'CALL 'TAIL_CALL) next))
       (and-let* ((cise (base-cise base)))
	 (parameterize ((result-type 'call)) (render cise))
	 (render `(($goto-insn ,next)))))
      (('PUSH . next)
       (render `((PUSH (SP vm) (AC vm))))
       (render `(($goto-insn ,(symbol-join next)))))
      (((and (or 'LREF 'FREF 'GREF) ref) . next)
       (and-let* ((cise (base-cise ref)))
	 (parameterize ((result-type 'comb)) (render cise)))
       (render `(($goto-insn ,(symbol-join next)))))
      (_ #f)))
  (define (do-combined-rec orig comb)
    (or (and-let* ((insn (find-insn (symbol-join comb) insns))) (render1 insn))
	(do-combined orig comb)
	(error 'do-combined-rec
	       "Unknown combined insn" (~ orig'name))))
  (define (cise->string cise)
    (call-with-output-string
      (^p (for-each (^c (cise-render c :port p)) cise))))
  (define (render cise)
    (cgen-body (format "{~a}" (cise->string cise)))
    #t)
  (define (render1 insn)
    (or (and-let* ((cise (slot-ref insn'body)))     (render cise))
	(and-let* ((comb (slot-ref insn'combined))) (do-combined insn comb))
	(error 'construct-vm-body
	       "Unknown insn" (slot-ref insn'name))))

  (parameterize ((insn-alist (map (^i (cons (~ i 'name) i)) insns)))
    (dolist (insn insns)
      (case-label insn)
      (render1 insn))
    ))

(define *insn-file* "instructions.scm")
(define *header-prefix* "
#ifndef SAGITTARIUS_INSTRUCATIONS_H
#define SAGITTARIUS_INSTRUCATIONS_H

#include \"sagittariusdefs.h\"
#define INSN_MASK 0xFF
#define INSN_VALUE1_MASK  0xFFF
#define INSN_VALUE2_MASK  (uintptr_t)-1
#define INSN_VALUE1_SHIFT 8
#define INSN_VALUE2_SHIFT 20
#if defined(_MSC_VER) || defined(_SG_WIN_SUPPORT)
/* what a stupid macro definition on windows.h */
#undef CONST
#endif
")
(define *header-suffix*  "typedef struct InsnInfoRec InsnInfo;
struct InsnInfoRec
{
  const char *name;
  int         number;
  int         instValues;
  int         argc;
  int         hasSrc;
  int         label;
};
#define INSN(o)            ((o) & INSN_MASK)
#define INSN_VALUE1(insn) (((int)(insn)) >> INSN_VALUE1_SHIFT)
#define INSN_VALUE2(insn) (((int)(insn)) >> INSN_VALUE2_SHIFT)
#define INSN_VAL1(v, insn) ((v) = INSN_VALUE1(insn))
#define INSN_VAL2(v1, v2, insn)	\\
  do {				\\
    (v1) = (INSN_VALUE1(insn) & INSN_VALUE1_MASK);	\\
    (v2) = (INSN_VALUE2(insn) & INSN_VALUE2_MASK);	\\
  } while (0)
#define MERGE_INSN_VALUE1(insn, value)      \\
  ((insn) | ((value) << INSN_VALUE1_SHIFT))
#define MERGE_INSN_VALUE2(insn, val1, val2) \\
  ((insn) | ((val1) << INSN_VALUE1_SHIFT) | ((val2) << INSN_VALUE2_SHIFT))
SG_CDECL_BEGIN
SG_EXTERN InsnInfo* Sg_LookupInsnName(Instruction insn);
SG_CDECL_END
#endif
")

(define (main args)
  (parameterize ((cgen-current-unit *unit*))
    (let1 insns (populate-insn-info (reverse (expand-toplevels *insn-file*)))
      ;; Generate insn names and DEFINSN macros
      ;; for header
      (cgen-extern *header-prefix*)
      (cgen-body "#ifdef DEFINSN")
      (cgen-extern "typedef enum {")
      (dolist (insn insns)
	(cgen-extern (format "  ~a = 0x~2,'0x,"
			     (slot-ref insn'name) (slot-ref insn'code)))
	(cgen-body (format "DEFINSN(~a, ~a, ~a, ~a, ~a)"
			   (~ insn 'name)
			   (~ insn 'vals)
			   (~ insn 'argc)
			   (if (~ insn 'src?) 'TRUE 'FALSE)
			   (if (~ insn 'label?) 'TRUE 'FALSE))))
      (cgen-extern "} Instruction;")
      (cgen-extern (format 
		    "#define INSTRUCTION_COUNT ~a /** number of instructions */"
		    (length insns)))
      (cgen-body "#endif /* DEFINSN */")
      ;; emit body
      (cgen-body "#ifdef VM_LOOP")
      (construct-vm-body insns)
      (cgen-body "#endif /* VM_LOOP */")

      ;; for header
      (cgen-extern *header-suffix*)
      (cgen-emit-h (cgen-current-unit))
      (cgen-emit-c (cgen-current-unit))
      ))
  0)