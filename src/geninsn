;; -*- scheme -*-
(import (rnrs)
	(sagittarius io)
	(sagittarius vm)
	(sagittarius control)
	(sagittarius cgen cise)
	(sagittarius cgen unit)
	(sagittarius cgen syntax)
	(match)
	(shorten)
	(srfi :2 and-let*)
	(srfi :26 cut)
	(srfi :39 parameters)
	(util file)
	(util list)
	(clos user))

(define *preamble*
  (list "/* Generated automatically from boot/instructions.scm */"
	"/* DO NOT EDIT */"))

(define *unit*
  (make <cgen-unit>
    :name "vminsn"
    :preamble *preamble*
    :c-file   "vminsn.c"
    ;;:h-file   "sagittarius/instruction.h"
    :init-prologue ""
    :init-epilogue ""))

(define-class <vm-insn-info> ()
  ((name :init-keyword :name)
   (code :init-keyword :code)
   (vals :init-keyword :vals)
   (argc :init-keyword :argc)
   (body :init-keyword :body)
   (src? :init-keyword :src?)
   (label? :init-keyword :label?)
   (return? :init-keyword :return?)
   (combined :init-keyword :combined)
   ))

(define (expand-toplevels file)
  (fold (lambda (form seed)
	  (match form
	    (('define-inst . _) (cons form seed))
	    (('define-cise-stmt . _) (eval form (vm-current-library)) seed)
	    (('define-cise-expr . _) (eval form (vm-current-library)) seed)
	    (else (error 'expand-toplevels
			 "invalid form in vm instruction definition" form))))
	'()
	(file->sexp-list file)))

(define (parse-define-inst insn-num definsn)
  (define (parse-keywords form)
    (let loop ((form form)
	       (return? #f)
	       (label? #f)
	       (combined #f))
      (match form
	((:label . rest) (loop (cdr form) return? #t combined))
	((:return . rest) (loop (cdr form) #t label? combined))
	((:combined . rest)
	 (values return? label? rest #f))
	(_ (values return? label? combined form)))))

  (match definsn
    ((_ name (insn-argc argc src?) . rest)
     (let-values (((return? label? combined body) (parse-keywords rest)))
       (make <vm-insn-info>
	 :name name :code insn-num :vals insn-argc :argc argc
	 :src? src? :label? label? :return? return? :combined combined
	 :body body)))
    (_ (error 'parse-define-inst
	      "malformed define-inst" definsn))))

(define (populate-insn-info definsns)
  (let1 insns (map-with-index parse-define-inst definsns)
    ;; do we need to do something here?
    insns))

(define insn-alist (make-parameter '()))
(define (case-label insn)
    (cgen-body (format "CASE(~a) {" (slot-ref insn'name))))

(define (do-combined insn comb)
  (for-each (^c (cond 
		 ((assq c (insn-alist))
		  => (^i (render1 (cdr i))))
		 (else
		  (error 'construct-vm-body
			 "combined insn appeared before its parent definition"
			 c)))) (car comb)))
(define (cise->string cise)
  (call-with-output-string
    (^p (for-each (^c (cise-render c 'stmt p)) cise))))
(define (render cise)
  (or (null? cise)
      (cgen-body (cise->string cise))
      #t))
(define (render1 insn)
  (or (and-let* ((cise (slot-ref insn'body)))     (render cise))
      (and-let* ((comb (slot-ref insn'combined))) (do-combined insn comb))
      (error 'construct-vm-body
	     "Unknown insn" (slot-ref insn'name))))


(define (construct-vm-body insns)
  (parameterize ((insn-alist (map (lambda (i)
				    (cons (slot-ref i 'name) i)) insns)))
    (dolist (insn insns)
      (case-label insn)
      (render1 insn)
      (if (slot-ref insn 'return?)
	  (cgen-body "  return AC(vm);\n}")
	  (cgen-body "  NEXT;\n}")))
    ))

(define *insn-file* "../boot/instructions.scm")
(define *header-prefix* "
#ifndef SAGITTARIUS_INSTRUCATIONS_H
#define SAGITTARIUS_INSTRUCATIONS_H

#include \"sagittariusdefs.h\"
#define INSN_MASK 0xFF
#define INSN_VALUE1_MASK  0xFFF
#define INSN_VALUE2_MASK  ((1 << (sizeof(intptr_t) * 8)) - 1)
#define INSN_VALUE1_SHIFT 8
#define INSN_VALUE2_SHIFT 20
#ifdef _MSC_VER
/* what a stupid macro definition on windows.h */
#undef CONST
#endif
typedef enum {")
(define *header-suffix*  "} Instruction;
typedef struct InsnInfoRec InsnInfo;
struct InsnInfoRec
{
  const char *name;
  int         number;
  int         instValues;
  int         argc;
  int         hasSrc;
  int         label;
};
#define INSN(o)            ((o) & INSN_MASK)
#define INSN_VAL1(v, insn) ((v) = ((int)(insn)) >> INSN_VALUE1_SHIFT)
#define INSN_VAL2(v1, v2, insn)	\\
  do {				\\
    (v1) = ((((int)(insn)) >> INSN_VALUE1_SHIFT) & INSN_VALUE1_MASK);	\\
    (v2) = ((((int)(insn)) >> INSN_VALUE2_SHIFT) & INSN_VALUE2_MASK);	\\
  } while (0)
#define MERGE_INSN_VALUE1(insn, value)      \\
  ((insn) | ((value) << INSN_VALUE1_SHIFT))
#define MERGE_INSN_VALUE2(insn, val1, val2) \\
  ((insn) | ((val1) << INSN_VALUE1_SHIFT) | ((val2) << INSN_VALUE2_SHIFT))
SG_CDECL_BEGIN
SG_EXTERN InsnInfo* Sg_LookupInsnName(Instruction insn);
SG_CDECL_END
#endif
")


(parameterize ((cgen-current-unit *unit*))
  (let1 insns (populate-insn-info (reverse (expand-toplevels *insn-file*)))
    ;; Generate insn names and DEFINSN macros
    ;; for header
    (cgen-extern *header-prefix*)
    (cgen-body "#ifdef DEFINSN")
    (dolist (insn insns)
      (cgen-extern (format "  ~a = 0x~2,'0x,"
			   (slot-ref insn'name) (slot-ref insn'code)))
      (cgen-body (format "DEFINSN(~a, ~a, ~a, ~a, ~a)"
			 (slot-ref insn 'name)
			 (slot-ref insn 'vals)
			 (slot-ref insn 'argc)
			 (if (slot-ref insn 'src?) 'TRUE 'FALSE)
			 (if (slot-ref insn 'label?) 'TRUE 'FALSE))))
    (cgen-extern (format 
		  "  INSTRUCTION_COUNT = ~a, /** number of instructions */"
		  (length insns)))
    (cgen-body "#endif /* DEFINSN */")
    ;; emit body
    (cgen-body "#ifdef VM_LOOP")
    (construct-vm-body insns)
    (cgen-body "#endif /* VM_LOOP */")

    ;; for header
    (cgen-extern *header-suffix*)
    (cgen-emit-h (cgen-current-unit))
    (cgen-emit-c (cgen-current-unit))
    ))
0