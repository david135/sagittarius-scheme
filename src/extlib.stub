;; -*- scheme -*-
(library (sagittarius) ;; redefine but no problem
    (export identifier?
	    ;; sucks!!
	    make-syntax-object
	    ;; generics
	    make-generic
	    register-generic
	    generic-ref
	    generic-set!
	    retrieve-generic
	    create-instance

	    ;; closure
	    closure?

	    ;; vector
	    vector-copy
	    )
    (import :null)
  ;; for library dependency
  (define-c-proc identifier? (id) ::boolean
    (result (SG_IDENTIFIERP id)))

  (define-c-proc make-syntax-object (datum) ::Object
    (result (Sg_MakeSyntax datum #f TRUE)))

  ;; generics
  (define-c-proc make-generic (name::Symbol printer ctr :rest fields) ::Object
    (result (Sg_MakeGeneric name printer ctr fields)))
  
  (define-c-proc register-generic (name::Symbol g::Generic lib::Library) ::void
    (Sg_RegisterGeneric name g lib))

  (define-c-proc generic-ref (g name::Symbol) ::Object
    (result (Sg_GenericRef g name)))

  (define-c-proc generic-set! (g name::Symbol value) ::void
    (Sg_GenericSet g name value))

  (define-c-proc retrieve-generic (name::Symbol :optional (maybeLibrary #f)) ::Object
    (result (Sg_RetrieveGeneric name maybeLibrary)))

  (define-c-proc create-instance (g::Generic) ::Object
    (result (Sg_CreateInstance g)))

  ;; closure?
  (define-c-proc closure? (cl) ::boolean
    (result (SG_CLOSUREP cl)))

  ;; vector
  (define-c-proc vector-copy (vec::Vector :optional (start::fixnum 0)
					            (end::fixnum -1)
						    fill) ::Object
    (result (Sg_VectorCopy vec start end fill)))
)