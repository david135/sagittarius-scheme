;; -*- Scheme -*-
;; generate compiler from original compiler.scm
;; NB. This is not the generator which generate C++ code.
(cond-expand
 (gauche
  (add-load-path ".")
  (use srfi-1)
  (use util.match)
  (use file.util)
  (use gauche.sequence)
  ;;(load "pp.scm")
  (use pp)
  )
 (sagittarius
  (import (rnrs) (srfi :1)
	  (core misc) ;; for deifne-macro
	  (match)
	  (pp)
	  (util list)
	  (util file))
  (define (errorf fmt . args)
    (error 'errorf (apply format fmt args)))
  )
 )

(define-macro (aif test-form then-form . else-form)
  `(let ((it ,test-form))
     (if it ,then-form ,@else-form)))

(define (extract-quasiquote-vector obj)
  (match obj
  (('define (name . args) ('quasiquote #(pat ...)))
   `(define (,name ,@args)
      (let1 v (make-vector ,(length pat))
        ,@(map-with-index
           (lambda (i x)
             `(vector-set! v ,i ,(if (pair? x) (second x) x)))
           pat)
        v)))
  (else
   obj)))

(define (write-cond-expand body marks)
  (for-each
   (lambda (x)
     (match x
       (('include file-name)
        (for-each 
	 (lambda (sexp)
	   (match sexp
	     (('cond-expand . body)
	      (aif (find (lambda (x) (memq (car x) marks))
			 body)
		   (write-cond-expand (cdr it) marks)
		   (aif (find (lambda (x) (eq? (car x) 'else)) body)
			(write-cond-expand (cdr it) marks)
			(errorf "condition? ~a not found " marks))))
	     (else
	      (pretty-print sexp))))
	 (file->sexp-list file-name)))
       (else 
	(pretty-print x))))
   body))


(define (main args)
  (unless (>= (length args) 3)
    (errorf "Usage: ~a input-file cond-expand-symbol~%" (car args)))
  (format #f "Do not edit! This file is automatically generated by ~a.~%" (car args))
  (let ((file (cadr args))
	(marks (map string->symbol (cddr args))))
    (with-input-from-file file
      (lambda ()
	(format #t "(library (sagittarius compiler)~%")
	(format #t "         (export compile compile-with-* compile-p1 compile-p2 compile-p3~%")
	(format #t "                 ensure-library-name)~%")
	(format #t "         (import null (core base) ~%")
	(format #t "                      (for (core syntax-rules) expand)~%")
	(format #t "                      (core syntax-case)~%")
	(format #t "                      (core errors)~%")
	(format #t "                      (sagittarius)~%")
	(format #t "                      (sagittarius vm)~%")
	(format #t "                      (sagittarius vm instruction)~%")
	(format #t "                      (sagittarius vm debug)~%")
	(format #t "                      (for (sagittarius compiler match) expand)~%")
	(format #t "                      (sagittarius compiler util)~%")
	(format #t "                      (sagittarius compiler procedure))~%") ;; TODO change import library
	(let loop ((obj (read)))
	  (cond
	   ((eof-object? obj) (format #t ")~%")'())
	   (else
	    (match obj
	      (('cond-expand . body)
	       (aif (find (lambda (x) (memq (car x) marks)) body)
		    (write-cond-expand (cdr it) marks)
		    (aif (find (lambda (x) (eq? (car x) 'else)) body)
			 (write-cond-expand (cdr it) marks)
			 (errorf "condition? ~a not found " marks))))
	      (else (pretty-print (extract-quasiquote-vector obj)) (newline)))
	    (loop (read)))))))
    0))

(cond-expand
 (sagittarius
  (main (command-line)))
 (gauche 0))
;;;; end of file
;; Local Variables:
;; coding: utf-8-unix
;; End:
